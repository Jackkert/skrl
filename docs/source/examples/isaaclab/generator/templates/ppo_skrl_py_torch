import torch
import torch.nn as nn

# import the skrl components to build the RL system
from skrl.agents.torch.ppo import PPO, PPO_DEFAULT_CONFIG
from skrl.envs.loaders.torch import load_isaaclab_env
from skrl.envs.wrappers.torch import wrap_env
from skrl.memories.torch import RandomMemory
from skrl.models.torch import DeterministicMixin, GaussianMixin, Model
from skrl.resources.preprocessors.torch import RunningStandardScaler
from skrl.resources.schedulers.torch import KLAdaptiveRL
from skrl.trainers.torch import SequentialTrainer
from skrl.utils import set_seed


# seed for reproducibility
set_seed()  # e.g. `set_seed(42)` for fixed seed


{% if models.separate %}
# define models (stochastic and deterministic models) using mixins
class Policy(GaussianMixin, Model):
    def __init__(self, observation_space, action_space, device, clip_actions=False,
                 clip_log_std=True, min_log_std=-20, max_log_std=2, reduction="sum"):
        Model.__init__(self, observation_space, action_space, device)
        GaussianMixin.__init__(self, clip_actions, clip_log_std, min_log_std, max_log_std, reduction)

        {% for index in range(models.policy.hiddens | length) %}
        {% if loop.first %}
        self.net = nn.Sequential(nn.Linear(self.num_observations, {{ models.policy.hiddens | first }}),
                                 nn.{{ models.policy.hidden_activation | first }}(),
        {% elif loop.last %}
                                 nn.Linear({{ models.policy.hiddens[loop.previtem] }}, {{ models.policy.hiddens | last }}),
                                 nn.{{ models.policy.hidden_activation | last }}(),
                                 nn.Linear({{ models.policy.hiddens | last }}, self.num_actions))
        {% else %}
                                 nn.Linear({{ models.policy.hiddens[loop.previtem] }}, {{ models.policy.hiddens[index] }}),
                                 nn.{{ models.policy.hidden_activation[index] }}(),
        {% endif %}
        {% endfor %}
        self.log_std_parameter = nn.Parameter(torch.ones(self.num_actions))

    def compute(self, inputs, role):
        return self.net(inputs["states"]), self.log_std_parameter, {}

class Value(DeterministicMixin, Model):
    def __init__(self, observation_space, action_space, device, clip_actions=False):
        Model.__init__(self, observation_space, action_space, device)
        DeterministicMixin.__init__(self, clip_actions)

        {% for index in range(models.value.hiddens | length) %}
        {% if loop.first %}
        self.net = nn.Sequential(nn.Linear(self.num_observations, {{ models.value.hiddens | first }}),
                                 nn.{{ models.value.hidden_activation | first }}(),
        {% elif loop.last %}
                                 nn.Linear({{ models.value.hiddens[loop.previtem] }}, {{ models.value.hiddens | last }}),
                                 nn.{{ models.value.hidden_activation | last }}(),
                                 nn.Linear({{ models.value.hiddens | last }}, 1))
        {% else %}
                                 nn.Linear({{ models.value.hiddens[loop.previtem] }}, {{ models.value.hiddens[index] }}),
                                 nn.{{ models.value.hidden_activation[index] }}(),
        {% endif %}
        {% endfor %}

    def compute(self, inputs, role):
        return self.net(inputs["states"]), {}
{% else %}
# define shared model (stochastic and deterministic models) using mixins
class Shared(GaussianMixin, DeterministicMixin, Model):
    def __init__(self, observation_space, action_space, device, clip_actions=False,
                 clip_log_std=True, min_log_std=-20, max_log_std=2, reduction="sum"):
        Model.__init__(self, observation_space, action_space, device)
        GaussianMixin.__init__(self, clip_actions, clip_log_std, min_log_std, max_log_std, reduction)
        DeterministicMixin.__init__(self, clip_actions)

        {% for index in range(models.policy.hiddens | length) %}
        {% if loop.first %}
        self.net = nn.Sequential(nn.Linear(self.num_observations, {{ models.policy.hiddens | first }}),
                                 nn.{{ models.policy.hidden_activation | first }}(),
        {% elif loop.last %}
                                 nn.Linear({{ models.policy.hiddens[loop.previtem] }}, {{ models.policy.hiddens | last }}),
                                 nn.{{ models.policy.hidden_activation | last }}())
        {% else %}
                                 nn.Linear({{ models.policy.hiddens[loop.previtem] }}, {{ models.policy.hiddens[index] }}),
                                 nn.{{ models.policy.hidden_activation[index] }}(),
        {% endif %}
        {% endfor %}

        self.mean_layer = nn.Linear({{ models.policy.hiddens | last }}, self.num_actions)
        self.log_std_parameter = nn.Parameter(torch.ones(self.num_actions))

        self.value_layer = nn.Linear({{ models.value.hiddens | last }}, 1)

    def act(self, inputs, role):
        if role == "policy":
            return GaussianMixin.act(self, inputs, role)
        elif role == "value":
            return DeterministicMixin.act(self, inputs, role)

    def compute(self, inputs, role):
        if role == "policy":
            self._shared_output = self.net(inputs["states"])
            return self.mean_layer(self._shared_output), self.log_std_parameter, {}
        elif role == "value":
            shared_output = self.net(inputs["states"]) if self._shared_output is None else self._shared_output
            self._shared_output = None
            return self.value_layer(shared_output), {}
{% endif %}


# load and wrap the Isaac Lab environment
env = load_isaaclab_env(task_name="{{ metadata.task }}")
env = wrap_env(env)

device = env.device


# instantiate a memory as rollout buffer (any memory can be used for this)
memory = RandomMemory(memory_size={{ agent.rollouts }}, num_envs=env.num_envs, device=device)


# instantiate the agent's models (function approximators).
# PPO requires 2 models, visit its documentation for more details
# https://skrl.readthedocs.io/en/latest/api/agents/ppo.html#models
models = {}
{% if models.separate %}
models["policy"] = Policy(env.observation_space, env.action_space, device)
models["value"] = Value(env.observation_space, env.action_space, device)
{% else %}
models["policy"] = Shared(env.observation_space, env.action_space, device)
models["value"] = models["policy"]  # same instance: shared model
{% endif %}


# configure and instantiate the agent (visit its documentation to see all the options)
# https://skrl.readthedocs.io/en/latest/api/agents/ppo.html#configuration-and-hyperparameters
cfg = PPO_DEFAULT_CONFIG.copy()
cfg["rollouts"] = {{ agent.rollouts }}  # memory_size
cfg["learning_epochs"] = {{ agent.learning_epochs }}
cfg["mini_batches"] = {{ agent.mini_batches }}
cfg["discount_factor"] = {{ agent.discount_factor }}
cfg["lambda"] = {{ agent.lambda }}
cfg["learning_rate"] = {{ "%.1e" | format(agent.learning_rate) }}
{% if agent.learning_rate_scheduler == "KLAdaptiveLR" %}
cfg["learning_rate_scheduler"] = KLAdaptiveRL
cfg["learning_rate_scheduler_kwargs"] = {"kl_threshold": {{ agent.learning_rate_scheduler_kwargs.kl_threshold }}}
{% else %}
cfg["learning_rate_scheduler"] = None
cfg["learning_rate_scheduler_kwargs"] = {}
{% endif %}
cfg["random_timesteps"] = 0
cfg["learning_starts"] = 0
cfg["grad_norm_clip"] = {{ agent.grad_norm_clip }}
cfg["ratio_clip"] = {{ agent.ratio_clip }}
cfg["value_clip"] = {{ agent.value_clip }}
cfg["clip_predicted_values"] = {{ agent.clip_predicted_values }}
cfg["entropy_loss_scale"] = {{ agent.entropy_loss_scale }}
cfg["value_loss_scale"] = {{ agent.value_loss_scale }}
cfg["kl_threshold"] = {{ agent.kl_threshold }}
{% if agent.rewards_shaper_scale == 1.0 %}
cfg["rewards_shaper"] = None
{% else %}
cfg["rewards_shaper"] = lambda rewards, timestep, timesteps: rewards * {{ agent.rewards_shaper_scale }}
{% endif %}
cfg["time_limit_bootstrap"] = True
{% if agent.state_preprocessor == "RunningStandardScaler" %}
cfg["state_preprocessor"] = RunningStandardScaler
cfg["state_preprocessor_kwargs"] = {"size": env.observation_space, "device": device}
{% else %}
cfg["state_preprocessor"] = None
cfg["state_preprocessor_kwargs"] = {}
{% endif %}
{% if agent.value_preprocessor == "RunningStandardScaler" %}
cfg["value_preprocessor"] = RunningStandardScaler
cfg["value_preprocessor_kwargs"] = {"size": 1, "device": device}
{% else %}
cfg["value_preprocessor"] = None
cfg["value_preprocessor_kwargs"] = {}
{% endif %}
# logging to TensorBoard and write checkpoints (in timesteps)
cfg["experiment"]["write_interval"] = "auto"
cfg["experiment"]["checkpoint_interval"] = "auto"
cfg["experiment"]["directory"] = "runs/torch/{{ metadata.task }}"

agent = PPO(models=models,
            memory=memory,
            cfg=cfg,
            observation_space=env.observation_space,
            action_space=env.action_space,
            device=device)


# configure and instantiate the RL trainer
cfg_trainer = {"timesteps": {{ trainer.timesteps }}, "headless": True}
trainer = SequentialTrainer(cfg=cfg_trainer, env=env, agents=agent)

# start training
trainer.train()


# # ---------------------------------------------------------
# # comment the code above: `trainer.train()`, and...
# # uncomment the following lines to evaluate a trained agent
# # ---------------------------------------------------------
# from skrl.utils.huggingface import download_model_from_huggingface

# # download the trained agent's checkpoint from Hugging Face Hub and load it
# path = download_model_from_huggingface("skrl/IsaacLab-{{ metadata.task }}-PPO", filename="agent.pt")
# agent.load(path)

# # start evaluation
# trainer.eval()
